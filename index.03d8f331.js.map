{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.initialState = initialState;\n        this.gameStatus = \"idle\";\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft(rows) {\n                var _this = this;\n                if (this.gameStatus === \"playing\") {\n                    var arrayOfRows = Array.from(rows);\n                    var gridBeforeMove = arrayOfRows.map(function(row) {\n                        return Array.from(row.querySelectorAll(\"td\")).map(function(cell) {\n                            return cell.textContent.trim();\n                        });\n                    });\n                    var nonEmptyCells = [];\n                    rows.forEach(function(row, rowIndex) {\n                        var cells = row.querySelectorAll(\"td\");\n                        cells.forEach(function(cell, cellIndex) {\n                            if (cell.textContent.trim().length > 0) nonEmptyCells.push({\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex,\n                                cellNumber: parseInt(cell.textContent.trim(), 10)\n                            });\n                        });\n                    });\n                    this.removeCell(rows);\n                    nonEmptyCells.forEach(function(param) {\n                        var rowIndex = param.rowIndex, cellIndex = param.cellIndex, cellNumber = param.cellNumber;\n                        var targetCellIndex = cellIndex;\n                        while(targetCellIndex > 0){\n                            var previousRow = rows[rowIndex];\n                            var previousCell = previousRow.querySelectorAll(\"td\")[targetCellIndex - 1];\n                            if (previousCell.textContent.trim().length === 0) targetCellIndex--;\n                            else {\n                                var nextCellValue = parseInt(previousCell.textContent);\n                                if (nextCellValue === cellNumber) {\n                                    var newCellValue = nextCellValue + cellNumber;\n                                    previousCell.textContent = newCellValue;\n                                    previousCell.className = \"field-cell field-cell--\".concat(previousCell.textContent);\n                                    _this.getScore(newCellValue);\n                                    if (newCellValue === 2048) _this.gameStatus = \"win\";\n                                } else {\n                                    var currentRow = rows[rowIndex];\n                                    var currentCell = currentRow.querySelectorAll(\"td\")[targetCellIndex];\n                                    currentCell.textContent = cellNumber;\n                                    currentCell.className = \"field-cell field-cell--\".concat(cellNumber);\n                                }\n                                return;\n                            }\n                        }\n                        var finalRow = rows[rowIndex];\n                        var finalCell = finalRow.querySelectorAll(\"td\")[targetCellIndex];\n                        finalCell.textContent = cellNumber;\n                        finalCell.className = \"field-cell field-cell--\".concat(cellNumber);\n                    });\n                    var gridAfterMove = arrayOfRows.map(function(row) {\n                        return Array.from(row.querySelectorAll(\"td\")).map(function(cell) {\n                            return cell.textContent.trim();\n                        });\n                    });\n                    var gridChanged = !gridBeforeMove.every(function(row, rowIndex) {\n                        return row.every(function(cell, cellIndex) {\n                            return cell === gridAfterMove[rowIndex][cellIndex];\n                        });\n                    });\n                    if (gridChanged) return this.findEmptyCells(rows);\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight(rows) {\n                var _this = this;\n                if (this.gameStatus === \"playing\") {\n                    var arrayOfRows = Array.from(rows);\n                    var gridBeforeMove = arrayOfRows.map(function(row) {\n                        return Array.from(row.querySelectorAll(\"td\")).map(function(cell) {\n                            return cell.textContent.trim();\n                        });\n                    });\n                    var nonEmptyCells = [];\n                    rows.forEach(function(row, rowIndex) {\n                        var cells = row.querySelectorAll(\"td\");\n                        for(var cellIndex = cells.length - 1; cellIndex >= 0; cellIndex--){\n                            var cell = cells[cellIndex];\n                            if (cell.textContent.trim().length > 0) nonEmptyCells.push({\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex,\n                                cellNumber: parseInt(cell.textContent.trim(), 10)\n                            });\n                        }\n                    });\n                    this.removeCell(rows);\n                    nonEmptyCells.forEach(function(param) {\n                        var rowIndex = param.rowIndex, cellIndex = param.cellIndex, cellNumber = param.cellNumber;\n                        var targetCellIndex = cellIndex;\n                        while(targetCellIndex < rows[0].querySelectorAll(\"td\").length - 1){\n                            var nextRow = rows[rowIndex];\n                            var nextCell = nextRow.querySelectorAll(\"td\")[targetCellIndex + 1];\n                            if (nextCell.textContent.trim().length === 0) targetCellIndex++;\n                            else {\n                                var nextCellValue = parseInt(nextCell.textContent);\n                                if (nextCellValue === cellNumber) {\n                                    var newCellValue = nextCellValue + cellNumber;\n                                    nextCell.textContent = newCellValue;\n                                    nextCell.className = \"field-cell field-cell--\".concat(nextCell.textContent);\n                                    _this.getScore(newCellValue);\n                                    if (newCellValue === 2048) _this.gameStatus = \"win\";\n                                } else {\n                                    var currentRow = rows[rowIndex];\n                                    var currentCell = currentRow.querySelectorAll(\"td\")[targetCellIndex];\n                                    currentCell.textContent = cellNumber;\n                                    currentCell.className = \"field-cell field-cell--\".concat(cellNumber);\n                                }\n                                return;\n                            }\n                        }\n                        var finalRow = rows[rowIndex];\n                        var finalCell = finalRow.querySelectorAll(\"td\")[targetCellIndex];\n                        finalCell.textContent = cellNumber;\n                        finalCell.className = \"field-cell field-cell--\".concat(cellNumber);\n                    });\n                    var gridAfterMove = arrayOfRows.map(function(row) {\n                        return Array.from(row.querySelectorAll(\"td\")).map(function(cell) {\n                            return cell.textContent.trim();\n                        });\n                    });\n                    var gridChanged = !gridBeforeMove.every(function(row, rowIndex) {\n                        return row.every(function(cell, cellIndex) {\n                            return cell === gridAfterMove[rowIndex][cellIndex];\n                        });\n                    });\n                    if (gridChanged) return this.findEmptyCells(rows);\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp(rows) {\n                var _this = this;\n                if (this.gameStatus === \"playing\") {\n                    var arrayOfRows = Array.from(rows);\n                    var gridBeforeMove = arrayOfRows.map(function(row) {\n                        return Array.from(row.querySelectorAll(\"td\")).map(function(cell) {\n                            return cell.textContent.trim();\n                        });\n                    });\n                    var nonEmptyCells = [];\n                    rows.forEach(function(row, rowIndex) {\n                        var cells = row.querySelectorAll(\"td\");\n                        cells.forEach(function(cell, cellIndex) {\n                            if (cell.textContent.trim().length > 0) nonEmptyCells.push({\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex,\n                                cellNumber: parseInt(cell.textContent.trim(), 10)\n                            });\n                        });\n                    });\n                    this.removeCell(rows);\n                    nonEmptyCells.forEach(function(param) {\n                        var rowIndex = param.rowIndex, cellIndex = param.cellIndex, cellNumber = param.cellNumber;\n                        var targetRowIndex = rowIndex;\n                        while(targetRowIndex > 0){\n                            var previousRow = rows[targetRowIndex - 1];\n                            var previousCell = previousRow.querySelectorAll(\"td\")[cellIndex];\n                            if (previousCell.textContent.trim().length === 0) targetRowIndex--;\n                            else {\n                                var previousCellValue = parseInt(previousCell.textContent);\n                                if (previousCellValue === cellNumber) {\n                                    var newCellValue = previousCellValue + cellNumber;\n                                    previousCell.textContent = newCellValue;\n                                    previousCell.className = \"field-cell field-cell--\".concat(previousCell.textContent);\n                                    _this.getScore(newCellValue);\n                                    if (newCellValue === 2048) _this.gameStatus = \"win\";\n                                } else {\n                                    var currentRow = rows[targetRowIndex];\n                                    var currentCell = currentRow.querySelectorAll(\"td\")[cellIndex];\n                                    currentCell.textContent = cellNumber;\n                                    currentCell.className = \"field-cell field-cell--\".concat(cellNumber);\n                                }\n                                return;\n                            }\n                        }\n                        var finalRow = rows[targetRowIndex];\n                        var finalCell = finalRow.querySelectorAll(\"td\")[cellIndex];\n                        finalCell.textContent = cellNumber;\n                        finalCell.className = \"field-cell field-cell--\".concat(cellNumber);\n                    });\n                    var gridAfterMove = arrayOfRows.map(function(row) {\n                        return Array.from(row.querySelectorAll(\"td\")).map(function(cell) {\n                            return cell.textContent.trim();\n                        });\n                    });\n                    var gridChanged = !gridBeforeMove.every(function(row, rowIndex) {\n                        return row.every(function(cell, cellIndex) {\n                            return cell === gridAfterMove[rowIndex][cellIndex];\n                        });\n                    });\n                    if (gridChanged) return this.findEmptyCells(rows);\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown(rows) {\n                var _this = this;\n                if (this.gameStatus === \"playing\") {\n                    var _loop = function(rowIndex) {\n                        var cells = rows[rowIndex].querySelectorAll(\"td\");\n                        cells.forEach(function(cell, cellIndex) {\n                            if (cell.textContent.trim().length > 0) nonEmptyCells.push({\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex,\n                                cellNumber: parseInt(cell.textContent.trim(), 10)\n                            });\n                        });\n                    };\n                    var arrayOfRows = Array.from(rows);\n                    var gridBeforeMove = arrayOfRows.map(function(row) {\n                        return Array.from(row.querySelectorAll(\"td\")).map(function(cell) {\n                            return cell.textContent.trim();\n                        });\n                    });\n                    var nonEmptyCells = [];\n                    for(var rowIndex = rows.length - 1; rowIndex >= 0; rowIndex--)_loop(rowIndex);\n                    this.removeCell(rows);\n                    nonEmptyCells.forEach(function(param) {\n                        var rowIndex = param.rowIndex, cellIndex = param.cellIndex, cellNumber = param.cellNumber;\n                        var targetRowIndex = rowIndex;\n                        while(targetRowIndex < rows.length - 1){\n                            var nextRow = rows[targetRowIndex + 1];\n                            var nextCell = nextRow.querySelectorAll(\"td\")[cellIndex];\n                            if (nextCell.textContent.trim().length === 0) targetRowIndex++;\n                            else {\n                                var nextCellValue = parseInt(nextCell.textContent);\n                                if (nextCellValue === cellNumber) {\n                                    var newCellValue = nextCellValue + cellNumber;\n                                    nextCell.textContent = newCellValue;\n                                    nextCell.className = \"field-cell field-cell--\".concat(nextCell.textContent);\n                                    _this.getScore(newCellValue);\n                                    if (newCellValue === 2048) _this.gameStatus = \"win\";\n                                } else {\n                                    var currentRow = rows[targetRowIndex];\n                                    var currentCell = currentRow.querySelectorAll(\"td\")[cellIndex];\n                                    currentCell.textContent = cellNumber;\n                                    currentCell.className = \"field-cell field-cell--\".concat(cellNumber);\n                                }\n                                return;\n                            }\n                        }\n                        var finalRow = rows[targetRowIndex];\n                        var finalCell = finalRow.querySelectorAll(\"td\")[cellIndex];\n                        finalCell.textContent = cellNumber;\n                        finalCell.className = \"field-cell field-cell--\".concat(cellNumber);\n                    });\n                    var gridAfterMove = arrayOfRows.map(function(row) {\n                        return Array.from(row.querySelectorAll(\"td\")).map(function(cell) {\n                            return cell.textContent.trim();\n                        });\n                    });\n                    var gridChanged = !gridBeforeMove.every(function(row, rowIndex) {\n                        return row.every(function(cell, cellIndex) {\n                            return cell === gridAfterMove[rowIndex][cellIndex];\n                        });\n                    });\n                    if (gridChanged) return this.findEmptyCells(rows);\n                }\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore(newScore) {\n                if (newScore !== undefined) this.score += newScore;\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState(rows) {\n                var arrayOfRows = [];\n                rows.forEach(function(row) {\n                    var cells = row.querySelectorAll(\"td\");\n                    var arrayOfCell = [];\n                    cells.forEach(function(_, cellIndex) {\n                        arrayOfCell.push(cellIndex);\n                    });\n                    arrayOfRows.push(arrayOfCell);\n                });\n                this.initialState = arrayOfRows;\n                return this.initialState;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.gameStatus;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start(rows) {\n                this.gameStatus = \"playing\";\n                var isEmpty = true;\n                rows.forEach(function(row) {\n                    var cells = row.querySelectorAll(\"td\");\n                    cells.forEach(function(cell) {\n                        if (cell.textContent.trim().length > 0) isEmpty = false;\n                    });\n                });\n                return this.createCell(isEmpty);\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart(rows) {\n                this.gameStatus = \"idle\";\n                this.score = 0;\n                this.removeCell(rows);\n                this.isGridFull = [];\n            }\n        },\n        {\n            key: \"getRandomIndex\",\n            value: function getRandomIndex() {\n                var arrayOfRandomIndexs = [];\n                var firstIndex = Math.floor(Math.random() * 4);\n                var secondIndex = Math.floor(Math.random() * 4);\n                var thirdIndex = Math.floor(Math.random() * 4);\n                var fourthIndex = Math.floor(Math.random() * 4);\n                if (firstIndex === thirdIndex) {\n                    firstIndex = Math.floor(Math.random() * 4);\n                    thirdIndex = Math.floor(Math.random() * 4);\n                }\n                if (secondIndex === fourthIndex) {\n                    secondIndex = Math.floor(Math.random() * 4);\n                    fourthIndex = Math.floor(Math.random() * 4);\n                }\n                if (firstIndex === secondIndex) {\n                    firstIndex = Math.floor(Math.random() * 4);\n                    secondIndex = Math.floor(Math.random() * 4);\n                }\n                if (thirdIndex === fourthIndex) {\n                    thirdIndex = Math.floor(Math.random() * 4);\n                    fourthIndex = Math.floor(Math.random() * 4);\n                }\n                arrayOfRandomIndexs.push(firstIndex);\n                arrayOfRandomIndexs.push(secondIndex);\n                arrayOfRandomIndexs.push(thirdIndex);\n                arrayOfRandomIndexs.push(fourthIndex);\n                return arrayOfRandomIndexs;\n            }\n        },\n        {\n            key: \"getRandomCellNumber\",\n            value: function getRandomCellNumber() {\n                var persentOfFourFirst = Math.random();\n                var persentOfFourSecond = Math.random();\n                var arrayOfRandomCellNumber = [];\n                var firstNumber = persentOfFourFirst <= 0.1 ? 4 : 2;\n                var secondNumber = persentOfFourSecond <= 0.1 ? 4 : 2;\n                arrayOfRandomCellNumber.push(firstNumber);\n                arrayOfRandomCellNumber.push(secondNumber);\n                return arrayOfRandomCellNumber;\n            }\n        },\n        {\n            key: \"createCell\",\n            value: function createCell(isEmpty) {\n                var randomIndexes = this.getRandomIndex();\n                var cellNumber = this.getRandomCellNumber();\n                var firstIndexes = null;\n                var seconIndexes = null;\n                var arrayOfIndexes = [];\n                this.initialState.forEach(function(row, rowIndex) {\n                    row.forEach(function(_, cellIndex) {\n                        if (isEmpty) {\n                            if (rowIndex === randomIndexes[0] && cellIndex === randomIndexes[2]) {\n                                firstIndexes = {\n                                    rowIndex: randomIndexes[0],\n                                    cellIndex: randomIndexes[2],\n                                    cellNumber: cellNumber[0]\n                                };\n                                arrayOfIndexes.push(firstIndexes);\n                            }\n                            if (rowIndex === randomIndexes[1] && cellIndex === randomIndexes[3]) {\n                                seconIndexes = {\n                                    rowIndex: randomIndexes[1],\n                                    cellIndex: randomIndexes[3],\n                                    cellNumber: cellNumber[1]\n                                };\n                                arrayOfIndexes.push(seconIndexes);\n                            }\n                        }\n                    });\n                });\n                return arrayOfIndexes;\n            }\n        },\n        {\n            key: \"createCellIfGameStarted\",\n            value: function createCellIfGameStarted(arrayOfEmpyRows, arrayOfEmpyCells) {\n                var randomSoloRow = Math.floor(Math.random() * arrayOfEmpyRows.length);\n                var randomSoloRowIndex = arrayOfEmpyRows[randomSoloRow];\n                var randomSoloCellIndex = arrayOfEmpyCells[randomSoloRow];\n                arrayOfEmpyRows.splice(randomSoloRow, 1);\n                arrayOfEmpyCells.splice(randomSoloRow, 1);\n                var cellNumber = this.getRandomCellNumber();\n                var firstIndexes = null;\n                var arrayOfIndexes = [];\n                arrayOfEmpyRows.splice(randomSoloRow, 1);\n                arrayOfEmpyCells.splice(randomSoloRow, 1);\n                this.initialState.forEach(function(row, rowIndex) {\n                    row.forEach(function(_, cellIndex) {\n                        if (rowIndex === randomSoloRowIndex && cellIndex === randomSoloCellIndex) {\n                            firstIndexes = {\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex,\n                                cellNumber: cellNumber[0]\n                            };\n                            arrayOfIndexes.push(firstIndexes);\n                        }\n                    });\n                });\n                return arrayOfIndexes;\n            }\n        },\n        {\n            key: \"findEmptyCells\",\n            value: function findEmptyCells(rows) {\n                var arrayOfEmptyRows = [];\n                var arrayOfEmptyCells = [];\n                rows.forEach(function(row, rowIndex) {\n                    var cells = row.querySelectorAll(\"td\");\n                    cells.forEach(function(cell, cellIndex) {\n                        if (cell.textContent.trim().length === 0) {\n                            arrayOfEmptyRows.push(rowIndex);\n                            arrayOfEmptyCells.push(cellIndex);\n                        }\n                    });\n                });\n                return this.createCellIfGameStarted(arrayOfEmptyRows, arrayOfEmptyCells);\n            }\n        },\n        {\n            key: \"isMovePossible\",\n            value: function isMovePossible(gridAfterMove) {\n                var isCellsFullHorizontally = [];\n                var isCellsFullVertically = [];\n                gridAfterMove.forEach(function(row) {\n                    if (row.length === 4 && !row.includes(\"\") && isCellsFullHorizontally.length < 4) {\n                        var isCellFull = [];\n                        for(var i = 0; i < row.length - 1; i++){\n                            if (row[i] !== row[i + 1]) isCellFull.push(true);\n                            if (isCellFull.length === 3) isCellsFullHorizontally.push(true);\n                        }\n                    }\n                });\n                for(var i = 0; i < gridAfterMove.length - 1; i++){\n                    var currentRow = gridAfterMove[i];\n                    var nextRow = gridAfterMove[i + 1];\n                    var isCellFull = [];\n                    if (currentRow.length === 4 && nextRow.length === 4 && !currentRow.includes(\"\") && !nextRow.includes(\"\")) for(var j = 0; j < currentRow.length; j++){\n                        if (currentRow[j] !== nextRow[j]) isCellFull.push(true);\n                        if (isCellFull.length === 4) isCellsFullVertically.push(true);\n                    }\n                }\n                if (isCellsFullHorizontally.length === 4 && isCellsFullVertically.length === 3) this.gameStatus = \"lose\";\n            }\n        },\n        {\n            key: \"removeCell\",\n            value: function removeCell(rows) {\n                rows.forEach(function(row) {\n                    var cells = row.querySelectorAll(\"td\");\n                    cells.forEach(function(cell) {\n                        if (cell.textContent.length > 0) {\n                            cell.className = \"field-cell\";\n                            cell.innerHTML = \"\";\n                        }\n                    });\n                });\n            }\n        },\n        {\n            key: \"changeMessage\",\n            value: function changeMessage(startMessage) {\n                if (this.gameStatus === \"playing\") startMessage.classList.add(\"hidden\");\n                if (this.gameStatus === \"idle\") startMessage.classList.remove(\"hidden\");\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$controls = document.querySelector(\".controls\");\nvar $197cd56b15c33885$var$score = $197cd56b15c33885$var$controls.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$startButton = $197cd56b15c33885$var$controls.querySelector(\".button\");\nvar $197cd56b15c33885$var$table = document.querySelector(\"table\");\nvar $197cd56b15c33885$var$tbody = $197cd56b15c33885$var$table.querySelector(\"tbody\");\nvar $197cd56b15c33885$var$rows = $197cd56b15c33885$var$tbody.querySelectorAll(\"tr\");\nvar $197cd56b15c33885$var$messages = document.querySelector(\".message-container\");\nvar $197cd56b15c33885$var$loseMessage = $197cd56b15c33885$var$messages.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$winMessage = $197cd56b15c33885$var$messages.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$startMessage = $197cd56b15c33885$var$messages.querySelector(\".message-start\");\n$197cd56b15c33885$var$loseMessage.classList.add(\"hidden\");\n$197cd56b15c33885$var$winMessage.classList.add(\"hidden\");\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n$197cd56b15c33885$var$game.getState($197cd56b15c33885$var$rows);\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$startButton.hasAttribute(\"class\", \"start\") && $197cd56b15c33885$var$startButton.textContent === \"Start\") {\n        $197cd56b15c33885$var$startButton.classList.remove(\"start\");\n        $197cd56b15c33885$var$startButton.classList.add(\"restart\");\n        $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n        var indexes = $197cd56b15c33885$var$game.start($197cd56b15c33885$var$rows);\n        $197cd56b15c33885$var$game.changeMessage($197cd56b15c33885$var$startMessage);\n        $197cd56b15c33885$var$createCell(indexes);\n    } else if ($197cd56b15c33885$var$startButton.hasAttribute(\"class\", \"restart\") && $197cd56b15c33885$var$startButton.textContent === \"Restart\") {\n        $197cd56b15c33885$var$startButton.classList.remove(\"restart\");\n        $197cd56b15c33885$var$startButton.classList.add(\"start\");\n        $197cd56b15c33885$var$startButton.textContent = \"Start\";\n        $197cd56b15c33885$var$game.restart($197cd56b15c33885$var$rows);\n        $197cd56b15c33885$var$score.textContent = 0;\n        $197cd56b15c33885$var$winMessage.classList.add(\"hidden\");\n        $197cd56b15c33885$var$loseMessage.classList.add(\"hidden\");\n        $197cd56b15c33885$var$game.changeMessage($197cd56b15c33885$var$startMessage);\n    }\n});\nfunction $197cd56b15c33885$var$createCell(indexes) {\n    $197cd56b15c33885$var$rows.forEach(function(row, rowIndex) {\n        var cells = row.querySelectorAll(\"td\");\n        cells.forEach(function(cell, cellIndex) {\n            if (indexes.length === 2) {\n                var firstIndex = indexes[0];\n                var secondIndex = indexes[1];\n                if (firstIndex.rowIndex === rowIndex && firstIndex.cellIndex === cellIndex) {\n                    cell.classList.add(\"field-cell--\".concat(firstIndex.cellNumber));\n                    cell.textContent = firstIndex.cellNumber;\n                }\n                if (secondIndex.rowIndex === rowIndex && secondIndex.cellIndex === cellIndex) {\n                    cell.classList.add(\"field-cell--\".concat(secondIndex.cellNumber));\n                    cell.textContent = secondIndex.cellNumber;\n                }\n            }\n        });\n    });\n}\nvar $197cd56b15c33885$var$observer = new MutationObserver(function() {\n    var arrayOfRows = Array.from($197cd56b15c33885$var$rows);\n    var grid = arrayOfRows.map(function(row) {\n        return Array.from(row.querySelectorAll(\"td\")).map(function(cell) {\n            return cell.textContent.trim();\n        });\n    });\n    $197cd56b15c33885$var$game.isMovePossible(grid);\n    var gameStatus = $197cd56b15c33885$var$game.gameStatus;\n    if (gameStatus === \"lose\") $197cd56b15c33885$var$loseMessage.classList.remove(\"hidden\");\n});\n$197cd56b15c33885$var$observer.observe($197cd56b15c33885$var$tbody, {\n    childList: true,\n    subtree: true\n});\ndocument.addEventListener(\"keydown\", function(evnt) {\n    evnt.preventDefault();\n    if ($197cd56b15c33885$var$game.getStatus() === \"playing\") switch(evnt.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$createCellIfGameStarted($197cd56b15c33885$var$game.moveLeft($197cd56b15c33885$var$rows));\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$createCellIfGameStarted($197cd56b15c33885$var$game.moveRight($197cd56b15c33885$var$rows));\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$createCellIfGameStarted($197cd56b15c33885$var$game.moveUp($197cd56b15c33885$var$rows));\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$createCellIfGameStarted($197cd56b15c33885$var$game.moveDown($197cd56b15c33885$var$rows));\n            break;\n        default:\n            break;\n    }\n    $197cd56b15c33885$var$score.textContent = $197cd56b15c33885$var$game.getScore();\n    if ($197cd56b15c33885$var$game.getStatus() === \"win\") $197cd56b15c33885$var$winMessage.classList.remove(\"hidden\");\n});\nfunction $197cd56b15c33885$var$createCellIfGameStarted(index) {\n    if (index !== undefined) {\n        var firstIndexes = index[0];\n        $197cd56b15c33885$var$rows.forEach(function(row, rowIndex) {\n            var cells = row.querySelectorAll(\"td\");\n            cells.forEach(function(cell, cellIndex) {\n                if (firstIndexes.rowIndex === rowIndex && firstIndexes.cellIndex === cellIndex) {\n                    cell.classList.add(\"field-cell--\".concat(firstIndexes.cellNumber));\n                    cell.textContent = firstIndexes.cellNumber;\n                }\n            });\n        });\n    }\n}\n\n})();\n//# sourceMappingURL=index.03d8f331.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst controls = document.querySelector('.controls');\nconst score = controls.querySelector('.game-score');\nconst startButton = controls.querySelector('.button');\n\nconst table = document.querySelector('table');\nconst tbody = table.querySelector('tbody');\nconst rows = tbody.querySelectorAll('tr');\n\nconst messages = document.querySelector('.message-container');\nconst loseMessage = messages.querySelector('.message-lose');\nconst winMessage = messages.querySelector('.message-win');\nconst startMessage = messages.querySelector('.message-start');\n\nloseMessage.classList.add('hidden');\nwinMessage.classList.add('hidden');\n\nconst game = new Game();\n\ngame.getState(rows);\n\nstartButton.addEventListener('click', () => {\n  if (\n    startButton.hasAttribute('class', 'start') &&\n    startButton.textContent === 'Start'\n  ) {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n\n    const indexes = game.start(rows);\n\n    game.changeMessage(startMessage);\n\n    createCell(indexes);\n  } else if (\n    startButton.hasAttribute('class', 'restart') &&\n    startButton.textContent === 'Restart'\n  ) {\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n\n    game.restart(rows);\n\n    score.textContent = 0;\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n\n    game.changeMessage(startMessage);\n  }\n});\n\nfunction createCell(indexes) {\n  rows.forEach((row, rowIndex) => {\n    const cells = row.querySelectorAll('td');\n\n    cells.forEach((cell, cellIndex) => {\n      if (indexes.length === 2) {\n        const firstIndex = indexes[0];\n        const secondIndex = indexes[1];\n\n        if (\n          firstIndex.rowIndex === rowIndex &&\n          firstIndex.cellIndex === cellIndex\n        ) {\n          cell.classList.add(`field-cell--${firstIndex.cellNumber}`);\n          cell.textContent = firstIndex.cellNumber;\n        }\n\n        if (\n          secondIndex.rowIndex === rowIndex &&\n          secondIndex.cellIndex === cellIndex\n        ) {\n          cell.classList.add(`field-cell--${secondIndex.cellNumber}`);\n          cell.textContent = secondIndex.cellNumber;\n        }\n      }\n    });\n  });\n}\n\nconst observer = new MutationObserver(() => {\n  const arrayOfRows = Array.from(rows);\n\n  const grid = arrayOfRows.map(\n    (row) =>\n      Array.from(row.querySelectorAll('td')).map(\n        (cell) => cell.textContent.trim(),\n        // eslint-disable-next-line no-console\n      ),\n    // eslint-disable-next-line no-console\n  );\n\n  game.isMovePossible(grid);\n\n  const gameStatus = game.gameStatus;\n\n  if (gameStatus === 'lose') {\n    loseMessage.classList.remove('hidden');\n  }\n});\n\nobserver.observe(tbody, {\n  childList: true,\n  subtree: true,\n});\n\ndocument.addEventListener('keydown', (evnt) => {\n  evnt.preventDefault();\n\n  if (game.getStatus() === 'playing') {\n    switch (evnt.key) {\n      case 'ArrowLeft':\n        createCellIfGameStarted(game.moveLeft(rows));\n        break;\n\n      case 'ArrowRight':\n        createCellIfGameStarted(game.moveRight(rows));\n        break;\n\n      case 'ArrowUp':\n        createCellIfGameStarted(game.moveUp(rows));\n        break;\n\n      case 'ArrowDown':\n        createCellIfGameStarted(game.moveDown(rows));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  score.textContent = game.getScore();\n\n  if (game.getStatus() === 'win') {\n    winMessage.classList.remove('hidden');\n  }\n});\n\nfunction createCellIfGameStarted(index) {\n  if (index !== undefined) {\n    const firstIndexes = index[0];\n\n    rows.forEach((row, rowIndex) => {\n      const cells = row.querySelectorAll('td');\n\n      cells.forEach((cell, cellIndex) => {\n        if (\n          firstIndexes.rowIndex === rowIndex &&\n          firstIndexes.cellIndex === cellIndex\n        ) {\n          cell.classList.add(`field-cell--${firstIndexes.cellNumber}`);\n          cell.textContent = firstIndexes.cellNumber;\n        }\n      });\n    });\n  }\n}\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.gameStatus = 'idle';\n    this.score = 0;\n  }\n\n  moveLeft(rows) {\n    if (this.gameStatus === 'playing') {\n      const arrayOfRows = Array.from(rows);\n\n      const gridBeforeMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const nonEmptyCells = [];\n\n      rows.forEach((row, rowIndex) => {\n        const cells = row.querySelectorAll('td');\n\n        cells.forEach((cell, cellIndex) => {\n          if (cell.textContent.trim().length > 0) {\n            nonEmptyCells.push({\n              rowIndex,\n              cellIndex,\n              cellNumber: parseInt(cell.textContent.trim(), 10),\n            });\n          }\n        });\n      });\n\n      this.removeCell(rows);\n\n      nonEmptyCells.forEach(({ rowIndex, cellIndex, cellNumber }) => {\n        let targetCellIndex = cellIndex;\n\n        while (targetCellIndex > 0) {\n          const previousRow = rows[rowIndex];\n          const previousCell =\n            previousRow.querySelectorAll('td')[targetCellIndex - 1];\n\n          if (previousCell.textContent.trim().length === 0) {\n            targetCellIndex--;\n          } else {\n            const nextCellValue = parseInt(previousCell.textContent);\n\n            if (nextCellValue === cellNumber) {\n              const newCellValue = nextCellValue + cellNumber;\n\n              previousCell.textContent = newCellValue;\n              previousCell.className = `field-cell field-cell--${previousCell.textContent}`;\n\n              this.getScore(newCellValue);\n\n              if (newCellValue === 2048) {\n                this.gameStatus = 'win';\n              }\n            } else {\n              const currentRow = rows[rowIndex];\n              const currentCell =\n                currentRow.querySelectorAll('td')[targetCellIndex];\n\n              currentCell.textContent = cellNumber;\n              currentCell.className = `field-cell field-cell--${cellNumber}`;\n            }\n\n            return;\n          }\n        }\n\n        const finalRow = rows[rowIndex];\n        const finalCell = finalRow.querySelectorAll('td')[targetCellIndex];\n\n        finalCell.textContent = cellNumber;\n        finalCell.className = `field-cell field-cell--${cellNumber}`;\n      });\n\n      const gridAfterMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const gridChanged = !gridBeforeMove.every(\n        (row, rowIndex) =>\n          row.every(\n            (cell, cellIndex) => cell === gridAfterMove[rowIndex][cellIndex],\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      if (gridChanged) {\n        return this.findEmptyCells(rows);\n      }\n    }\n  }\n\n  moveRight(rows) {\n    if (this.gameStatus === 'playing') {\n      const arrayOfRows = Array.from(rows);\n\n      const gridBeforeMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const nonEmptyCells = [];\n\n      rows.forEach((row, rowIndex) => {\n        const cells = row.querySelectorAll('td');\n\n        for (let cellIndex = cells.length - 1; cellIndex >= 0; cellIndex--) {\n          const cell = cells[cellIndex];\n\n          if (cell.textContent.trim().length > 0) {\n            nonEmptyCells.push({\n              rowIndex,\n              cellIndex,\n              cellNumber: parseInt(cell.textContent.trim(), 10),\n            });\n          }\n        }\n      });\n\n      this.removeCell(rows);\n\n      nonEmptyCells.forEach(({ rowIndex, cellIndex, cellNumber }) => {\n        let targetCellIndex = cellIndex;\n\n        while (targetCellIndex < rows[0].querySelectorAll('td').length - 1) {\n          const nextRow = rows[rowIndex];\n          const nextCell = nextRow.querySelectorAll('td')[targetCellIndex + 1];\n\n          if (nextCell.textContent.trim().length === 0) {\n            targetCellIndex++;\n          } else {\n            const nextCellValue = parseInt(nextCell.textContent);\n\n            if (nextCellValue === cellNumber) {\n              const newCellValue = nextCellValue + cellNumber;\n\n              nextCell.textContent = newCellValue;\n              nextCell.className = `field-cell field-cell--${nextCell.textContent}`;\n\n              this.getScore(newCellValue);\n\n              if (newCellValue === 2048) {\n                this.gameStatus = 'win';\n              }\n            } else {\n              const currentRow = rows[rowIndex];\n              const currentCell =\n                currentRow.querySelectorAll('td')[targetCellIndex];\n\n              currentCell.textContent = cellNumber;\n              currentCell.className = `field-cell field-cell--${cellNumber}`;\n            }\n\n            return;\n          }\n        }\n\n        const finalRow = rows[rowIndex];\n        const finalCell = finalRow.querySelectorAll('td')[targetCellIndex];\n\n        finalCell.textContent = cellNumber;\n        finalCell.className = `field-cell field-cell--${cellNumber}`;\n      });\n\n      const gridAfterMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const gridChanged = !gridBeforeMove.every(\n        (row, rowIndex) =>\n          row.every(\n            (cell, cellIndex) => cell === gridAfterMove[rowIndex][cellIndex],\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      if (gridChanged) {\n        return this.findEmptyCells(rows);\n      }\n    }\n  }\n\n  moveUp(rows) {\n    if (this.gameStatus === 'playing') {\n      const arrayOfRows = Array.from(rows);\n\n      const gridBeforeMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const nonEmptyCells = [];\n\n      rows.forEach((row, rowIndex) => {\n        const cells = row.querySelectorAll('td');\n\n        cells.forEach((cell, cellIndex) => {\n          if (cell.textContent.trim().length > 0) {\n            nonEmptyCells.push({\n              rowIndex,\n              cellIndex,\n              cellNumber: parseInt(cell.textContent.trim(), 10),\n            });\n          }\n        });\n      });\n\n      this.removeCell(rows);\n\n      nonEmptyCells.forEach(({ rowIndex, cellIndex, cellNumber }) => {\n        let targetRowIndex = rowIndex;\n\n        while (targetRowIndex > 0) {\n          const previousRow = rows[targetRowIndex - 1];\n          const previousCell = previousRow.querySelectorAll('td')[cellIndex];\n\n          if (previousCell.textContent.trim().length === 0) {\n            targetRowIndex--;\n          } else {\n            const previousCellValue = parseInt(previousCell.textContent);\n\n            if (previousCellValue === cellNumber) {\n              const newCellValue = previousCellValue + cellNumber;\n\n              previousCell.textContent = newCellValue;\n              previousCell.className = `field-cell field-cell--${previousCell.textContent}`;\n\n              this.getScore(newCellValue);\n\n              if (newCellValue === 2048) {\n                this.gameStatus = 'win';\n              }\n            } else {\n              const currentRow = rows[targetRowIndex];\n              const currentCell = currentRow.querySelectorAll('td')[cellIndex];\n\n              currentCell.textContent = cellNumber;\n              currentCell.className = `field-cell field-cell--${cellNumber}`;\n            }\n\n            return;\n          }\n        }\n\n        const finalRow = rows[targetRowIndex];\n        const finalCell = finalRow.querySelectorAll('td')[cellIndex];\n\n        finalCell.textContent = cellNumber;\n        finalCell.className = `field-cell field-cell--${cellNumber}`;\n      });\n\n      const gridAfterMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const gridChanged = !gridBeforeMove.every(\n        (row, rowIndex) =>\n          row.every(\n            (cell, cellIndex) => cell === gridAfterMove[rowIndex][cellIndex],\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      if (gridChanged) {\n        return this.findEmptyCells(rows);\n      }\n    }\n  }\n\n  moveDown(rows) {\n    if (this.gameStatus === 'playing') {\n      const arrayOfRows = Array.from(rows);\n\n      const gridBeforeMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const nonEmptyCells = [];\n\n      for (let rowIndex = rows.length - 1; rowIndex >= 0; rowIndex--) {\n        const cells = rows[rowIndex].querySelectorAll('td');\n\n        cells.forEach((cell, cellIndex) => {\n          if (cell.textContent.trim().length > 0) {\n            nonEmptyCells.push({\n              rowIndex,\n              cellIndex,\n              cellNumber: parseInt(cell.textContent.trim(), 10),\n            });\n          }\n        });\n      }\n\n      this.removeCell(rows);\n\n      nonEmptyCells.forEach(({ rowIndex, cellIndex, cellNumber }) => {\n        let targetRowIndex = rowIndex;\n\n        while (targetRowIndex < rows.length - 1) {\n          const nextRow = rows[targetRowIndex + 1];\n          const nextCell = nextRow.querySelectorAll('td')[cellIndex];\n\n          if (nextCell.textContent.trim().length === 0) {\n            targetRowIndex++;\n          } else {\n            const nextCellValue = parseInt(nextCell.textContent);\n\n            if (nextCellValue === cellNumber) {\n              const newCellValue = nextCellValue + cellNumber;\n\n              nextCell.textContent = newCellValue;\n              nextCell.className = `field-cell field-cell--${nextCell.textContent}`;\n\n              this.getScore(newCellValue);\n\n              if (newCellValue === 2048) {\n                this.gameStatus = 'win';\n              }\n            } else {\n              const currentRow = rows[targetRowIndex];\n              const currentCell = currentRow.querySelectorAll('td')[cellIndex];\n\n              currentCell.textContent = cellNumber;\n              currentCell.className = `field-cell field-cell--${cellNumber}`;\n            }\n\n            return;\n          }\n        }\n\n        const finalRow = rows[targetRowIndex];\n        const finalCell = finalRow.querySelectorAll('td')[cellIndex];\n\n        finalCell.textContent = cellNumber;\n        finalCell.className = `field-cell field-cell--${cellNumber}`;\n      });\n\n      const gridAfterMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const gridChanged = !gridBeforeMove.every(\n        (row, rowIndex) =>\n          row.every(\n            (cell, cellIndex) => cell === gridAfterMove[rowIndex][cellIndex],\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      if (gridChanged) {\n        return this.findEmptyCells(rows);\n      }\n    }\n  }\n\n  getScore(newScore) {\n    if (newScore !== undefined) {\n      this.score += newScore;\n    }\n\n    return this.score;\n  }\n\n  getState(rows) {\n    const arrayOfRows = [];\n\n    rows.forEach((row) => {\n      const cells = row.querySelectorAll('td');\n\n      const arrayOfCell = [];\n\n      cells.forEach((_, cellIndex) => {\n        arrayOfCell.push(cellIndex);\n      });\n\n      arrayOfRows.push(arrayOfCell);\n    });\n\n    this.initialState = arrayOfRows;\n\n    return this.initialState;\n  }\n\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  start(rows) {\n    this.gameStatus = 'playing';\n\n    let isEmpty = true;\n\n    rows.forEach((row) => {\n      const cells = row.querySelectorAll('td');\n\n      cells.forEach((cell) => {\n        if (cell.textContent.trim().length > 0) {\n          isEmpty = false;\n        }\n      });\n    });\n\n    return this.createCell(isEmpty);\n  }\n\n  restart(rows) {\n    this.gameStatus = 'idle';\n\n    this.score = 0;\n\n    this.removeCell(rows);\n\n    this.isGridFull = [];\n  }\n\n  getRandomIndex() {\n    const arrayOfRandomIndexs = [];\n\n    let firstIndex = Math.floor(Math.random() * 4);\n    let secondIndex = Math.floor(Math.random() * 4);\n    let thirdIndex = Math.floor(Math.random() * 4);\n    let fourthIndex = Math.floor(Math.random() * 4);\n\n    if (firstIndex === thirdIndex) {\n      firstIndex = Math.floor(Math.random() * 4);\n      thirdIndex = Math.floor(Math.random() * 4);\n    }\n\n    if (secondIndex === fourthIndex) {\n      secondIndex = Math.floor(Math.random() * 4);\n      fourthIndex = Math.floor(Math.random() * 4);\n    }\n\n    if (firstIndex === secondIndex) {\n      firstIndex = Math.floor(Math.random() * 4);\n      secondIndex = Math.floor(Math.random() * 4);\n    }\n\n    if (thirdIndex === fourthIndex) {\n      thirdIndex = Math.floor(Math.random() * 4);\n      fourthIndex = Math.floor(Math.random() * 4);\n    }\n\n    arrayOfRandomIndexs.push(firstIndex);\n    arrayOfRandomIndexs.push(secondIndex);\n    arrayOfRandomIndexs.push(thirdIndex);\n    arrayOfRandomIndexs.push(fourthIndex);\n\n    return arrayOfRandomIndexs;\n  }\n\n  getRandomCellNumber() {\n    const persentOfFourFirst = Math.random();\n    const persentOfFourSecond = Math.random();\n    const arrayOfRandomCellNumber = [];\n\n    const firstNumber = persentOfFourFirst <= 0.1 ? 4 : 2;\n    const secondNumber = persentOfFourSecond <= 0.1 ? 4 : 2;\n\n    arrayOfRandomCellNumber.push(firstNumber);\n    arrayOfRandomCellNumber.push(secondNumber);\n\n    return arrayOfRandomCellNumber;\n  }\n\n  createCell(isEmpty) {\n    const randomIndexes = this.getRandomIndex();\n    const cellNumber = this.getRandomCellNumber();\n\n    let firstIndexes = null;\n    let seconIndexes = null;\n\n    const arrayOfIndexes = [];\n\n    this.initialState.forEach((row, rowIndex) => {\n      row.forEach((_, cellIndex) => {\n        if (isEmpty) {\n          if (rowIndex === randomIndexes[0] && cellIndex === randomIndexes[2]) {\n            firstIndexes = {\n              rowIndex: randomIndexes[0],\n              cellIndex: randomIndexes[2],\n              cellNumber: cellNumber[0],\n            };\n\n            arrayOfIndexes.push(firstIndexes);\n          }\n\n          if (rowIndex === randomIndexes[1] && cellIndex === randomIndexes[3]) {\n            seconIndexes = {\n              rowIndex: randomIndexes[1],\n              cellIndex: randomIndexes[3],\n              cellNumber: cellNumber[1],\n            };\n\n            arrayOfIndexes.push(seconIndexes);\n          }\n        }\n      });\n    });\n\n    return arrayOfIndexes;\n  }\n\n  createCellIfGameStarted(arrayOfEmpyRows, arrayOfEmpyCells) {\n    const randomSoloRow = Math.floor(Math.random() * arrayOfEmpyRows.length);\n    const randomSoloRowIndex = arrayOfEmpyRows[randomSoloRow];\n    const randomSoloCellIndex = arrayOfEmpyCells[randomSoloRow];\n\n    arrayOfEmpyRows.splice(randomSoloRow, 1);\n    arrayOfEmpyCells.splice(randomSoloRow, 1);\n\n    const cellNumber = this.getRandomCellNumber();\n\n    let firstIndexes = null;\n\n    const arrayOfIndexes = [];\n\n    arrayOfEmpyRows.splice(randomSoloRow, 1);\n    arrayOfEmpyCells.splice(randomSoloRow, 1);\n\n    this.initialState.forEach((row, rowIndex) => {\n      row.forEach((_, cellIndex) => {\n        if (\n          rowIndex === randomSoloRowIndex &&\n          cellIndex === randomSoloCellIndex\n        ) {\n          firstIndexes = {\n            rowIndex,\n            cellIndex,\n            cellNumber: cellNumber[0],\n          };\n\n          arrayOfIndexes.push(firstIndexes);\n        }\n      });\n    });\n\n    return arrayOfIndexes;\n  }\n\n  findEmptyCells(rows) {\n    const arrayOfEmptyRows = [];\n    const arrayOfEmptyCells = [];\n\n    rows.forEach((row, rowIndex) => {\n      const cells = row.querySelectorAll('td');\n\n      cells.forEach((cell, cellIndex) => {\n        if (cell.textContent.trim().length === 0) {\n          arrayOfEmptyRows.push(rowIndex);\n          arrayOfEmptyCells.push(cellIndex);\n        }\n      });\n    });\n\n    return this.createCellIfGameStarted(arrayOfEmptyRows, arrayOfEmptyCells);\n  }\n\n  isMovePossible(gridAfterMove) {\n    const isCellsFullHorizontally = [];\n    const isCellsFullVertically = [];\n\n    gridAfterMove.forEach((row) => {\n      if (\n        row.length === 4 &&\n        !row.includes('') &&\n        isCellsFullHorizontally.length < 4\n      ) {\n        const isCellFull = [];\n\n        for (let i = 0; i < row.length - 1; i++) {\n          if (row[i] !== row[i + 1]) {\n            isCellFull.push(true);\n          }\n\n          if (isCellFull.length === 3) {\n            isCellsFullHorizontally.push(true);\n          }\n        }\n      }\n    });\n\n    for (let i = 0; i < gridAfterMove.length - 1; i++) {\n      const currentRow = gridAfterMove[i];\n      const nextRow = gridAfterMove[i + 1];\n      const isCellFull = [];\n\n      if (\n        currentRow.length === 4 &&\n        nextRow.length === 4 &&\n        !currentRow.includes('') &&\n        !nextRow.includes('')\n      ) {\n        for (let j = 0; j < currentRow.length; j++) {\n          if (currentRow[j] !== nextRow[j]) {\n            isCellFull.push(true);\n          }\n\n          if (isCellFull.length === 4) {\n            isCellsFullVertically.push(true);\n          }\n        }\n      }\n    }\n\n    if (\n      isCellsFullHorizontally.length === 4 &&\n      isCellsFullVertically.length === 3\n    ) {\n      this.gameStatus = 'lose';\n    }\n  }\n\n  removeCell(rows) {\n    rows.forEach((row) => {\n      const cells = row.querySelectorAll('td');\n\n      cells.forEach((cell) => {\n        if (cell.textContent.length > 0) {\n          cell.className = 'field-cell';\n          cell.innerHTML = '';\n        }\n      });\n    });\n  }\n\n  changeMessage(startMessage) {\n    if (this.gameStatus === 'playing') {\n      startMessage.classList.add('hidden');\n    }\n\n    if (this.gameStatus === 'idle') {\n      startMessage.classList.remove('hidden');\n    }\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$3d28d7f1aac198f5$exports","protoProps","Game","initialState","arguments","length","instance","Constructor","TypeError","gameStatus","score","key","value","rows","_this","arrayOfRows","Array","from","gridBeforeMove","map","row","querySelectorAll","cell","textContent","trim","nonEmptyCells","forEach","rowIndex","cells","cellIndex","push","cellNumber","parseInt","removeCell","param","targetCellIndex","previousCell","previousRow","nextCellValue","newCellValue","className","concat","getScore","currentCell","currentRow","finalCell","finalRow","gridAfterMove","every","findEmptyCells","nextCell","nextRow","targetRowIndex","previousCellValue","_loop","newScore","undefined","arrayOfCell","_","isEmpty","createCell","isGridFull","arrayOfRandomIndexs","firstIndex","Math","floor","random","secondIndex","thirdIndex","fourthIndex","persentOfFourSecond","arrayOfRandomCellNumber","persentOfFourFirst","randomIndexes","getRandomIndex","getRandomCellNumber","firstIndexes","seconIndexes","arrayOfIndexes","arrayOfEmpyRows","arrayOfEmpyCells","randomSoloRow","randomSoloRowIndex","randomSoloCellIndex","splice","arrayOfEmptyRows","arrayOfEmptyCells","createCellIfGameStarted","isCellsFullHorizontally","isCellsFullVertically","includes","isCellFull","i","j","innerHTML","startMessage","classList","add","remove","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$controls","document","querySelector","$197cd56b15c33885$var$score","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$tbody","$197cd56b15c33885$var$table","$197cd56b15c33885$var$rows","$197cd56b15c33885$var$messages","$197cd56b15c33885$var$loseMessage","$197cd56b15c33885$var$winMessage","$197cd56b15c33885$var$startMessage","$197cd56b15c33885$var$game","$197cd56b15c33885$var$createCellIfGameStarted","index","getState","addEventListener","hasAttribute","indexes","start","changeMessage","restart","$197cd56b15c33885$var$observer","MutationObserver","grid","isMovePossible","observe","childList","subtree","evnt","preventDefault","getStatus","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.03d8f331.js.map"}