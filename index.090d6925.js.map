{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.gameStatus = \"idle\";\n        this.score = 0;\n    }\n    moveLeft(rows) {\n        if (this.gameStatus === \"playing\") {\n            const arrayOfRows = Array.from(rows);\n            const gridBeforeMove = arrayOfRows.map((row)=>Array.from(row.querySelectorAll(\"td\")).map((cell)=>cell.textContent.trim()));\n            const nonEmptyCells = [];\n            rows.forEach((row, rowIndex)=>{\n                const cells = row.querySelectorAll(\"td\");\n                cells.forEach((cell, cellIndex)=>{\n                    if (cell.textContent.trim().length > 0) nonEmptyCells.push({\n                        rowIndex: rowIndex,\n                        cellIndex: cellIndex,\n                        cellNumber: parseInt(cell.textContent.trim(), 10)\n                    });\n                });\n            });\n            this.removeCell(rows);\n            nonEmptyCells.forEach(({ rowIndex: rowIndex, cellIndex: cellIndex, cellNumber: cellNumber })=>{\n                let targetCellIndex = cellIndex;\n                while(targetCellIndex > 0){\n                    const previousRow = rows[rowIndex];\n                    const previousCell = previousRow.querySelectorAll(\"td\")[targetCellIndex - 1];\n                    if (previousCell.textContent.trim().length === 0) targetCellIndex--;\n                    else {\n                        const nextCellValue = parseInt(previousCell.textContent);\n                        if (nextCellValue === cellNumber) {\n                            const newCellValue = nextCellValue + cellNumber;\n                            previousCell.textContent = newCellValue;\n                            previousCell.className = `field-cell field-cell--${previousCell.textContent}`;\n                            this.getScore(newCellValue);\n                            if (newCellValue === 2048) this.gameStatus = \"win\";\n                        } else {\n                            const currentRow = rows[rowIndex];\n                            const currentCell = currentRow.querySelectorAll(\"td\")[targetCellIndex];\n                            currentCell.textContent = cellNumber;\n                            currentCell.className = `field-cell field-cell--${cellNumber}`;\n                        }\n                        return;\n                    }\n                }\n                const finalRow = rows[rowIndex];\n                const finalCell = finalRow.querySelectorAll(\"td\")[targetCellIndex];\n                finalCell.textContent = cellNumber;\n                finalCell.className = `field-cell field-cell--${cellNumber}`;\n            });\n            const gridAfterMove = arrayOfRows.map((row)=>Array.from(row.querySelectorAll(\"td\")).map((cell)=>cell.textContent.trim()));\n            const gridChanged = !gridBeforeMove.every((row, rowIndex)=>row.every((cell, cellIndex)=>cell === gridAfterMove[rowIndex][cellIndex]));\n            if (gridChanged) return this.findEmptyCells(rows);\n        }\n    }\n    moveRight(rows) {\n        if (this.gameStatus === \"playing\") {\n            const arrayOfRows = Array.from(rows);\n            const gridBeforeMove = arrayOfRows.map((row)=>Array.from(row.querySelectorAll(\"td\")).map((cell)=>cell.textContent.trim()));\n            const nonEmptyCells = [];\n            rows.forEach((row, rowIndex)=>{\n                const cells = row.querySelectorAll(\"td\");\n                for(let cellIndex = cells.length - 1; cellIndex >= 0; cellIndex--){\n                    const cell = cells[cellIndex];\n                    if (cell.textContent.trim().length > 0) nonEmptyCells.push({\n                        rowIndex: rowIndex,\n                        cellIndex: cellIndex,\n                        cellNumber: parseInt(cell.textContent.trim(), 10)\n                    });\n                }\n            });\n            this.removeCell(rows);\n            nonEmptyCells.forEach(({ rowIndex: rowIndex, cellIndex: cellIndex, cellNumber: cellNumber })=>{\n                let targetCellIndex = cellIndex;\n                while(targetCellIndex < rows[0].querySelectorAll(\"td\").length - 1){\n                    const nextRow = rows[rowIndex];\n                    const nextCell = nextRow.querySelectorAll(\"td\")[targetCellIndex + 1];\n                    if (nextCell.textContent.trim().length === 0) targetCellIndex++;\n                    else {\n                        const nextCellValue = parseInt(nextCell.textContent);\n                        if (nextCellValue === cellNumber) {\n                            const newCellValue = nextCellValue + cellNumber;\n                            nextCell.textContent = newCellValue;\n                            nextCell.className = `field-cell field-cell--${nextCell.textContent}`;\n                            this.getScore(newCellValue);\n                            if (newCellValue === 2048) this.gameStatus = \"win\";\n                        } else {\n                            const currentRow = rows[rowIndex];\n                            const currentCell = currentRow.querySelectorAll(\"td\")[targetCellIndex];\n                            currentCell.textContent = cellNumber;\n                            currentCell.className = `field-cell field-cell--${cellNumber}`;\n                        }\n                        return;\n                    }\n                }\n                const finalRow = rows[rowIndex];\n                const finalCell = finalRow.querySelectorAll(\"td\")[targetCellIndex];\n                finalCell.textContent = cellNumber;\n                finalCell.className = `field-cell field-cell--${cellNumber}`;\n            });\n            const gridAfterMove = arrayOfRows.map((row)=>Array.from(row.querySelectorAll(\"td\")).map((cell)=>cell.textContent.trim()));\n            const gridChanged = !gridBeforeMove.every((row, rowIndex)=>row.every((cell, cellIndex)=>cell === gridAfterMove[rowIndex][cellIndex]));\n            if (gridChanged) return this.findEmptyCells(rows);\n        }\n    }\n    moveUp(rows) {\n        if (this.gameStatus === \"playing\") {\n            const arrayOfRows = Array.from(rows);\n            const gridBeforeMove = arrayOfRows.map((row)=>Array.from(row.querySelectorAll(\"td\")).map((cell)=>cell.textContent.trim()));\n            const nonEmptyCells = [];\n            rows.forEach((row, rowIndex)=>{\n                const cells = row.querySelectorAll(\"td\");\n                cells.forEach((cell, cellIndex)=>{\n                    if (cell.textContent.trim().length > 0) nonEmptyCells.push({\n                        rowIndex: rowIndex,\n                        cellIndex: cellIndex,\n                        cellNumber: parseInt(cell.textContent.trim(), 10)\n                    });\n                });\n            });\n            this.removeCell(rows);\n            nonEmptyCells.forEach(({ rowIndex: rowIndex, cellIndex: cellIndex, cellNumber: cellNumber })=>{\n                let targetRowIndex = rowIndex;\n                while(targetRowIndex > 0){\n                    const previousRow = rows[targetRowIndex - 1];\n                    const previousCell = previousRow.querySelectorAll(\"td\")[cellIndex];\n                    if (previousCell.textContent.trim().length === 0) targetRowIndex--;\n                    else {\n                        const previousCellValue = parseInt(previousCell.textContent);\n                        if (previousCellValue === cellNumber) {\n                            const newCellValue = previousCellValue + cellNumber;\n                            previousCell.textContent = newCellValue;\n                            previousCell.className = `field-cell field-cell--${previousCell.textContent}`;\n                            this.getScore(newCellValue);\n                            if (newCellValue === 2048) this.gameStatus = \"win\";\n                        } else {\n                            const currentRow = rows[targetRowIndex];\n                            const currentCell = currentRow.querySelectorAll(\"td\")[cellIndex];\n                            currentCell.textContent = cellNumber;\n                            currentCell.className = `field-cell field-cell--${cellNumber}`;\n                        }\n                        return;\n                    }\n                }\n                const finalRow = rows[targetRowIndex];\n                const finalCell = finalRow.querySelectorAll(\"td\")[cellIndex];\n                finalCell.textContent = cellNumber;\n                finalCell.className = `field-cell field-cell--${cellNumber}`;\n            });\n            const gridAfterMove = arrayOfRows.map((row)=>Array.from(row.querySelectorAll(\"td\")).map((cell)=>cell.textContent.trim()));\n            const gridChanged = !gridBeforeMove.every((row, rowIndex)=>row.every((cell, cellIndex)=>cell === gridAfterMove[rowIndex][cellIndex]));\n            if (gridChanged) return this.findEmptyCells(rows);\n        }\n    }\n    moveDown(rows) {\n        if (this.gameStatus === \"playing\") {\n            const arrayOfRows = Array.from(rows);\n            const gridBeforeMove = arrayOfRows.map((row)=>Array.from(row.querySelectorAll(\"td\")).map((cell)=>cell.textContent.trim()));\n            const nonEmptyCells = [];\n            for(let rowIndex = rows.length - 1; rowIndex >= 0; rowIndex--){\n                const cells = rows[rowIndex].querySelectorAll(\"td\");\n                cells.forEach((cell, cellIndex)=>{\n                    if (cell.textContent.trim().length > 0) nonEmptyCells.push({\n                        rowIndex: rowIndex,\n                        cellIndex: cellIndex,\n                        cellNumber: parseInt(cell.textContent.trim(), 10)\n                    });\n                });\n            }\n            this.removeCell(rows);\n            nonEmptyCells.forEach(({ rowIndex: rowIndex, cellIndex: cellIndex, cellNumber: cellNumber })=>{\n                let targetRowIndex = rowIndex;\n                while(targetRowIndex < rows.length - 1){\n                    const nextRow = rows[targetRowIndex + 1];\n                    const nextCell = nextRow.querySelectorAll(\"td\")[cellIndex];\n                    if (nextCell.textContent.trim().length === 0) targetRowIndex++;\n                    else {\n                        const nextCellValue = parseInt(nextCell.textContent);\n                        if (nextCellValue === cellNumber) {\n                            const newCellValue = nextCellValue + cellNumber;\n                            nextCell.textContent = newCellValue;\n                            nextCell.className = `field-cell field-cell--${nextCell.textContent}`;\n                            this.getScore(newCellValue);\n                            if (newCellValue === 2048) this.gameStatus = \"win\";\n                        } else {\n                            const currentRow = rows[targetRowIndex];\n                            const currentCell = currentRow.querySelectorAll(\"td\")[cellIndex];\n                            currentCell.textContent = cellNumber;\n                            currentCell.className = `field-cell field-cell--${cellNumber}`;\n                        }\n                        return;\n                    }\n                }\n                const finalRow = rows[targetRowIndex];\n                const finalCell = finalRow.querySelectorAll(\"td\")[cellIndex];\n                finalCell.textContent = cellNumber;\n                finalCell.className = `field-cell field-cell--${cellNumber}`;\n            });\n            const gridAfterMove = arrayOfRows.map((row)=>Array.from(row.querySelectorAll(\"td\")).map((cell)=>cell.textContent.trim()));\n            const gridChanged = !gridBeforeMove.every((row, rowIndex)=>row.every((cell, cellIndex)=>cell === gridAfterMove[rowIndex][cellIndex]));\n            if (gridChanged) return this.findEmptyCells(rows);\n        }\n    }\n    getScore(newScore) {\n        if (newScore !== undefined) this.score += newScore;\n        return this.score;\n    }\n    getState(rows) {\n        const arrayOfRows = [];\n        rows.forEach((row)=>{\n            const cells = row.querySelectorAll(\"td\");\n            const arrayOfCell = [];\n            cells.forEach((_, cellIndex)=>{\n                arrayOfCell.push(cellIndex);\n            });\n            arrayOfRows.push(arrayOfCell);\n        });\n        this.initialState = arrayOfRows;\n        return this.initialState;\n    }\n    getStatus() {\n        return this.gameStatus;\n    }\n    start(rows) {\n        this.gameStatus = \"playing\";\n        let isEmpty = true;\n        rows.forEach((row)=>{\n            const cells = row.querySelectorAll(\"td\");\n            cells.forEach((cell)=>{\n                if (cell.textContent.trim().length > 0) isEmpty = false;\n            });\n        });\n        return this.createCell(isEmpty);\n    }\n    restart(rows) {\n        this.gameStatus = \"idle\";\n        this.score = 0;\n        this.removeCell(rows);\n        this.isGridFull = [];\n    }\n    getRandomIndex() {\n        const arrayOfRandomIndexs = [];\n        let firstIndex = Math.floor(Math.random() * 4);\n        let secondIndex = Math.floor(Math.random() * 4);\n        let thirdIndex = Math.floor(Math.random() * 4);\n        let fourthIndex = Math.floor(Math.random() * 4);\n        if (firstIndex === thirdIndex) {\n            firstIndex = Math.floor(Math.random() * 4);\n            thirdIndex = Math.floor(Math.random() * 4);\n        }\n        if (secondIndex === fourthIndex) {\n            secondIndex = Math.floor(Math.random() * 4);\n            fourthIndex = Math.floor(Math.random() * 4);\n        }\n        if (firstIndex === secondIndex) {\n            firstIndex = Math.floor(Math.random() * 4);\n            secondIndex = Math.floor(Math.random() * 4);\n        }\n        if (thirdIndex === fourthIndex) {\n            thirdIndex = Math.floor(Math.random() * 4);\n            fourthIndex = Math.floor(Math.random() * 4);\n        }\n        arrayOfRandomIndexs.push(firstIndex);\n        arrayOfRandomIndexs.push(secondIndex);\n        arrayOfRandomIndexs.push(thirdIndex);\n        arrayOfRandomIndexs.push(fourthIndex);\n        return arrayOfRandomIndexs;\n    }\n    getRandomCellNumber() {\n        const persentOfFourFirst = Math.random();\n        const persentOfFourSecond = Math.random();\n        const arrayOfRandomCellNumber = [];\n        const firstNumber = persentOfFourFirst <= 0.1 ? 4 : 2;\n        const secondNumber = persentOfFourSecond <= 0.1 ? 4 : 2;\n        arrayOfRandomCellNumber.push(firstNumber);\n        arrayOfRandomCellNumber.push(secondNumber);\n        return arrayOfRandomCellNumber;\n    }\n    createCell(isEmpty) {\n        const randomIndexes = this.getRandomIndex();\n        const cellNumber = this.getRandomCellNumber();\n        let firstIndexes = null;\n        let seconIndexes = null;\n        const arrayOfIndexes = [];\n        this.initialState.forEach((row, rowIndex)=>{\n            row.forEach((_, cellIndex)=>{\n                if (isEmpty) {\n                    if (rowIndex === randomIndexes[0] && cellIndex === randomIndexes[2]) {\n                        firstIndexes = {\n                            rowIndex: randomIndexes[0],\n                            cellIndex: randomIndexes[2],\n                            cellNumber: cellNumber[0]\n                        };\n                        arrayOfIndexes.push(firstIndexes);\n                    }\n                    if (rowIndex === randomIndexes[1] && cellIndex === randomIndexes[3]) {\n                        seconIndexes = {\n                            rowIndex: randomIndexes[1],\n                            cellIndex: randomIndexes[3],\n                            cellNumber: cellNumber[1]\n                        };\n                        arrayOfIndexes.push(seconIndexes);\n                    }\n                }\n            });\n        });\n        return arrayOfIndexes;\n    }\n    createCellIfGameStarted(arrayOfEmpyRows, arrayOfEmpyCells) {\n        const randomSoloRow = Math.floor(Math.random() * arrayOfEmpyRows.length);\n        const randomSoloRowIndex = arrayOfEmpyRows[randomSoloRow];\n        const randomSoloCellIndex = arrayOfEmpyCells[randomSoloRow];\n        arrayOfEmpyRows.splice(randomSoloRow, 1);\n        arrayOfEmpyCells.splice(randomSoloRow, 1);\n        const cellNumber = this.getRandomCellNumber();\n        let firstIndexes = null;\n        const arrayOfIndexes = [];\n        arrayOfEmpyRows.splice(randomSoloRow, 1);\n        arrayOfEmpyCells.splice(randomSoloRow, 1);\n        this.initialState.forEach((row, rowIndex)=>{\n            row.forEach((_, cellIndex)=>{\n                if (rowIndex === randomSoloRowIndex && cellIndex === randomSoloCellIndex) {\n                    firstIndexes = {\n                        rowIndex: rowIndex,\n                        cellIndex: cellIndex,\n                        cellNumber: cellNumber[0]\n                    };\n                    arrayOfIndexes.push(firstIndexes);\n                }\n            });\n        });\n        return arrayOfIndexes;\n    }\n    findEmptyCells(rows) {\n        const arrayOfEmptyRows = [];\n        const arrayOfEmptyCells = [];\n        rows.forEach((row, rowIndex)=>{\n            const cells = row.querySelectorAll(\"td\");\n            cells.forEach((cell, cellIndex)=>{\n                if (cell.textContent.trim().length === 0) {\n                    arrayOfEmptyRows.push(rowIndex);\n                    arrayOfEmptyCells.push(cellIndex);\n                }\n            });\n        });\n        return this.createCellIfGameStarted(arrayOfEmptyRows, arrayOfEmptyCells);\n    }\n    isMovePossible(gridAfterMove) {\n        const isCellsFullHorizontally = [];\n        const isCellsFullVertically = [];\n        gridAfterMove.forEach((row)=>{\n            if (row.length === 4 && !row.includes(\"\") && isCellsFullHorizontally.length < 4) {\n                const isCellFull = [];\n                for(let i = 0; i < row.length - 1; i++){\n                    if (row[i] !== row[i + 1]) isCellFull.push(true);\n                    if (isCellFull.length === 3) isCellsFullHorizontally.push(true);\n                }\n            }\n        });\n        for(let i = 0; i < gridAfterMove.length - 1; i++){\n            const currentRow = gridAfterMove[i];\n            const nextRow = gridAfterMove[i + 1];\n            const isCellFull = [];\n            if (currentRow.length === 4 && nextRow.length === 4 && !currentRow.includes(\"\") && !nextRow.includes(\"\")) for(let j = 0; j < currentRow.length; j++){\n                if (currentRow[j] !== nextRow[j]) isCellFull.push(true);\n                if (isCellFull.length === 4) isCellsFullVertically.push(true);\n            }\n        }\n        if (isCellsFullHorizontally.length === 4 && isCellsFullVertically.length === 3) this.gameStatus = \"lose\";\n    }\n    removeCell(rows) {\n        rows.forEach((row)=>{\n            const cells = row.querySelectorAll(\"td\");\n            cells.forEach((cell)=>{\n                if (cell.textContent.length > 0) {\n                    cell.className = \"field-cell\";\n                    cell.innerHTML = \"\";\n                }\n            });\n        });\n    }\n    changeMessage(startMessage) {\n        if (this.gameStatus === \"playing\") startMessage.classList.add(\"hidden\");\n        if (this.gameStatus === \"idle\") startMessage.classList.remove(\"hidden\");\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$controls = document.querySelector(\".controls\");\nconst $09e991522ca7e64e$var$score = $09e991522ca7e64e$var$controls.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = $09e991522ca7e64e$var$controls.querySelector(\".button\");\nconst $09e991522ca7e64e$var$table = document.querySelector(\"table\");\nconst $09e991522ca7e64e$var$tbody = $09e991522ca7e64e$var$table.querySelector(\"tbody\");\nconst $09e991522ca7e64e$var$rows = $09e991522ca7e64e$var$tbody.querySelectorAll(\"tr\");\nconst $09e991522ca7e64e$var$messages = document.querySelector(\".message-container\");\nconst $09e991522ca7e64e$var$loseMessage = $09e991522ca7e64e$var$messages.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = $09e991522ca7e64e$var$messages.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$startMessage = $09e991522ca7e64e$var$messages.querySelector(\".message-start\");\n$09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n$09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n$09e991522ca7e64e$var$game.getState($09e991522ca7e64e$var$rows);\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.hasAttribute(\"class\", \"start\") && $09e991522ca7e64e$var$startButton.textContent === \"Start\") {\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        const indexes = $09e991522ca7e64e$var$game.start($09e991522ca7e64e$var$rows);\n        $09e991522ca7e64e$var$game.changeMessage($09e991522ca7e64e$var$startMessage);\n        $09e991522ca7e64e$var$createCell(indexes);\n    } else if ($09e991522ca7e64e$var$startButton.hasAttribute(\"class\", \"restart\") && $09e991522ca7e64e$var$startButton.textContent === \"Restart\") {\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n        $09e991522ca7e64e$var$game.restart($09e991522ca7e64e$var$rows);\n        $09e991522ca7e64e$var$score.textContent = 0;\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.changeMessage($09e991522ca7e64e$var$startMessage);\n    }\n});\nfunction $09e991522ca7e64e$var$createCell(indexes) {\n    $09e991522ca7e64e$var$rows.forEach((row, rowIndex)=>{\n        const cells = row.querySelectorAll(\"td\");\n        cells.forEach((cell, cellIndex)=>{\n            if (indexes.length === 2) {\n                const firstIndex = indexes[0];\n                const secondIndex = indexes[1];\n                if (firstIndex.rowIndex === rowIndex && firstIndex.cellIndex === cellIndex) {\n                    cell.classList.add(`field-cell--${firstIndex.cellNumber}`);\n                    cell.textContent = firstIndex.cellNumber;\n                }\n                if (secondIndex.rowIndex === rowIndex && secondIndex.cellIndex === cellIndex) {\n                    cell.classList.add(`field-cell--${secondIndex.cellNumber}`);\n                    cell.textContent = secondIndex.cellNumber;\n                }\n            }\n        });\n    });\n}\nconst $09e991522ca7e64e$var$observer = new MutationObserver(()=>{\n    const arrayOfRows = Array.from($09e991522ca7e64e$var$rows);\n    const grid = arrayOfRows.map((row)=>Array.from(row.querySelectorAll(\"td\")).map((cell)=>cell.textContent.trim()));\n    $09e991522ca7e64e$var$game.isMovePossible(grid);\n    const gameStatus = $09e991522ca7e64e$var$game.gameStatus;\n    if (gameStatus === \"lose\") $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n});\n$09e991522ca7e64e$var$observer.observe($09e991522ca7e64e$var$tbody, {\n    childList: true,\n    subtree: true\n});\ndocument.addEventListener(\"keydown\", (evnt)=>{\n    evnt.preventDefault();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") switch(evnt.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$createCellIfGameStarted($09e991522ca7e64e$var$game.moveLeft($09e991522ca7e64e$var$rows));\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$createCellIfGameStarted($09e991522ca7e64e$var$game.moveRight($09e991522ca7e64e$var$rows));\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$createCellIfGameStarted($09e991522ca7e64e$var$game.moveUp($09e991522ca7e64e$var$rows));\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$createCellIfGameStarted($09e991522ca7e64e$var$game.moveDown($09e991522ca7e64e$var$rows));\n            break;\n        default:\n            break;\n    }\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n});\nfunction $09e991522ca7e64e$var$createCellIfGameStarted(index) {\n    if (index !== undefined) {\n        const firstIndexes = index[0];\n        $09e991522ca7e64e$var$rows.forEach((row, rowIndex)=>{\n            const cells = row.querySelectorAll(\"td\");\n            cells.forEach((cell, cellIndex)=>{\n                if (firstIndexes.rowIndex === rowIndex && firstIndexes.cellIndex === cellIndex) {\n                    cell.classList.add(`field-cell--${firstIndexes.cellNumber}`);\n                    cell.textContent = firstIndexes.cellNumber;\n                }\n            });\n        });\n    }\n}\n\n\n//# sourceMappingURL=index.090d6925.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst controls = document.querySelector('.controls');\nconst score = controls.querySelector('.game-score');\nconst startButton = controls.querySelector('.button');\n\nconst table = document.querySelector('table');\nconst tbody = table.querySelector('tbody');\nconst rows = tbody.querySelectorAll('tr');\n\nconst messages = document.querySelector('.message-container');\nconst loseMessage = messages.querySelector('.message-lose');\nconst winMessage = messages.querySelector('.message-win');\nconst startMessage = messages.querySelector('.message-start');\n\nloseMessage.classList.add('hidden');\nwinMessage.classList.add('hidden');\n\nconst game = new Game();\n\ngame.getState(rows);\n\nstartButton.addEventListener('click', () => {\n  if (\n    startButton.hasAttribute('class', 'start') &&\n    startButton.textContent === 'Start'\n  ) {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n\n    const indexes = game.start(rows);\n\n    game.changeMessage(startMessage);\n\n    createCell(indexes);\n  } else if (\n    startButton.hasAttribute('class', 'restart') &&\n    startButton.textContent === 'Restart'\n  ) {\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n\n    game.restart(rows);\n\n    score.textContent = 0;\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n\n    game.changeMessage(startMessage);\n  }\n});\n\nfunction createCell(indexes) {\n  rows.forEach((row, rowIndex) => {\n    const cells = row.querySelectorAll('td');\n\n    cells.forEach((cell, cellIndex) => {\n      if (indexes.length === 2) {\n        const firstIndex = indexes[0];\n        const secondIndex = indexes[1];\n\n        if (\n          firstIndex.rowIndex === rowIndex &&\n          firstIndex.cellIndex === cellIndex\n        ) {\n          cell.classList.add(`field-cell--${firstIndex.cellNumber}`);\n          cell.textContent = firstIndex.cellNumber;\n        }\n\n        if (\n          secondIndex.rowIndex === rowIndex &&\n          secondIndex.cellIndex === cellIndex\n        ) {\n          cell.classList.add(`field-cell--${secondIndex.cellNumber}`);\n          cell.textContent = secondIndex.cellNumber;\n        }\n      }\n    });\n  });\n}\n\nconst observer = new MutationObserver(() => {\n  const arrayOfRows = Array.from(rows);\n\n  const grid = arrayOfRows.map(\n    (row) =>\n      Array.from(row.querySelectorAll('td')).map(\n        (cell) => cell.textContent.trim(),\n        // eslint-disable-next-line no-console\n      ),\n    // eslint-disable-next-line no-console\n  );\n\n  game.isMovePossible(grid);\n\n  const gameStatus = game.gameStatus;\n\n  if (gameStatus === 'lose') {\n    loseMessage.classList.remove('hidden');\n  }\n});\n\nobserver.observe(tbody, {\n  childList: true,\n  subtree: true,\n});\n\ndocument.addEventListener('keydown', (evnt) => {\n  evnt.preventDefault();\n\n  if (game.getStatus() === 'playing') {\n    switch (evnt.key) {\n      case 'ArrowLeft':\n        createCellIfGameStarted(game.moveLeft(rows));\n        break;\n\n      case 'ArrowRight':\n        createCellIfGameStarted(game.moveRight(rows));\n        break;\n\n      case 'ArrowUp':\n        createCellIfGameStarted(game.moveUp(rows));\n        break;\n\n      case 'ArrowDown':\n        createCellIfGameStarted(game.moveDown(rows));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  score.textContent = game.getScore();\n\n  if (game.getStatus() === 'win') {\n    winMessage.classList.remove('hidden');\n  }\n});\n\nfunction createCellIfGameStarted(index) {\n  if (index !== undefined) {\n    const firstIndexes = index[0];\n\n    rows.forEach((row, rowIndex) => {\n      const cells = row.querySelectorAll('td');\n\n      cells.forEach((cell, cellIndex) => {\n        if (\n          firstIndexes.rowIndex === rowIndex &&\n          firstIndexes.cellIndex === cellIndex\n        ) {\n          cell.classList.add(`field-cell--${firstIndexes.cellNumber}`);\n          cell.textContent = firstIndexes.cellNumber;\n        }\n      });\n    });\n  }\n}\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.gameStatus = 'idle';\n    this.score = 0;\n  }\n\n  moveLeft(rows) {\n    if (this.gameStatus === 'playing') {\n      const arrayOfRows = Array.from(rows);\n\n      const gridBeforeMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const nonEmptyCells = [];\n\n      rows.forEach((row, rowIndex) => {\n        const cells = row.querySelectorAll('td');\n\n        cells.forEach((cell, cellIndex) => {\n          if (cell.textContent.trim().length > 0) {\n            nonEmptyCells.push({\n              rowIndex,\n              cellIndex,\n              cellNumber: parseInt(cell.textContent.trim(), 10),\n            });\n          }\n        });\n      });\n\n      this.removeCell(rows);\n\n      nonEmptyCells.forEach(({ rowIndex, cellIndex, cellNumber }) => {\n        let targetCellIndex = cellIndex;\n\n        while (targetCellIndex > 0) {\n          const previousRow = rows[rowIndex];\n          const previousCell =\n            previousRow.querySelectorAll('td')[targetCellIndex - 1];\n\n          if (previousCell.textContent.trim().length === 0) {\n            targetCellIndex--;\n          } else {\n            const nextCellValue = parseInt(previousCell.textContent);\n\n            if (nextCellValue === cellNumber) {\n              const newCellValue = nextCellValue + cellNumber;\n\n              previousCell.textContent = newCellValue;\n              previousCell.className = `field-cell field-cell--${previousCell.textContent}`;\n\n              this.getScore(newCellValue);\n\n              if (newCellValue === 2048) {\n                this.gameStatus = 'win';\n              }\n            } else {\n              const currentRow = rows[rowIndex];\n              const currentCell =\n                currentRow.querySelectorAll('td')[targetCellIndex];\n\n              currentCell.textContent = cellNumber;\n              currentCell.className = `field-cell field-cell--${cellNumber}`;\n            }\n\n            return;\n          }\n        }\n\n        const finalRow = rows[rowIndex];\n        const finalCell = finalRow.querySelectorAll('td')[targetCellIndex];\n\n        finalCell.textContent = cellNumber;\n        finalCell.className = `field-cell field-cell--${cellNumber}`;\n      });\n\n      const gridAfterMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const gridChanged = !gridBeforeMove.every(\n        (row, rowIndex) =>\n          row.every(\n            (cell, cellIndex) => cell === gridAfterMove[rowIndex][cellIndex],\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      if (gridChanged) {\n        return this.findEmptyCells(rows);\n      }\n    }\n  }\n\n  moveRight(rows) {\n    if (this.gameStatus === 'playing') {\n      const arrayOfRows = Array.from(rows);\n\n      const gridBeforeMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const nonEmptyCells = [];\n\n      rows.forEach((row, rowIndex) => {\n        const cells = row.querySelectorAll('td');\n\n        for (let cellIndex = cells.length - 1; cellIndex >= 0; cellIndex--) {\n          const cell = cells[cellIndex];\n\n          if (cell.textContent.trim().length > 0) {\n            nonEmptyCells.push({\n              rowIndex,\n              cellIndex,\n              cellNumber: parseInt(cell.textContent.trim(), 10),\n            });\n          }\n        }\n      });\n\n      this.removeCell(rows);\n\n      nonEmptyCells.forEach(({ rowIndex, cellIndex, cellNumber }) => {\n        let targetCellIndex = cellIndex;\n\n        while (targetCellIndex < rows[0].querySelectorAll('td').length - 1) {\n          const nextRow = rows[rowIndex];\n          const nextCell = nextRow.querySelectorAll('td')[targetCellIndex + 1];\n\n          if (nextCell.textContent.trim().length === 0) {\n            targetCellIndex++;\n          } else {\n            const nextCellValue = parseInt(nextCell.textContent);\n\n            if (nextCellValue === cellNumber) {\n              const newCellValue = nextCellValue + cellNumber;\n\n              nextCell.textContent = newCellValue;\n              nextCell.className = `field-cell field-cell--${nextCell.textContent}`;\n\n              this.getScore(newCellValue);\n\n              if (newCellValue === 2048) {\n                this.gameStatus = 'win';\n              }\n            } else {\n              const currentRow = rows[rowIndex];\n              const currentCell =\n                currentRow.querySelectorAll('td')[targetCellIndex];\n\n              currentCell.textContent = cellNumber;\n              currentCell.className = `field-cell field-cell--${cellNumber}`;\n            }\n\n            return;\n          }\n        }\n\n        const finalRow = rows[rowIndex];\n        const finalCell = finalRow.querySelectorAll('td')[targetCellIndex];\n\n        finalCell.textContent = cellNumber;\n        finalCell.className = `field-cell field-cell--${cellNumber}`;\n      });\n\n      const gridAfterMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const gridChanged = !gridBeforeMove.every(\n        (row, rowIndex) =>\n          row.every(\n            (cell, cellIndex) => cell === gridAfterMove[rowIndex][cellIndex],\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      if (gridChanged) {\n        return this.findEmptyCells(rows);\n      }\n    }\n  }\n\n  moveUp(rows) {\n    if (this.gameStatus === 'playing') {\n      const arrayOfRows = Array.from(rows);\n\n      const gridBeforeMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const nonEmptyCells = [];\n\n      rows.forEach((row, rowIndex) => {\n        const cells = row.querySelectorAll('td');\n\n        cells.forEach((cell, cellIndex) => {\n          if (cell.textContent.trim().length > 0) {\n            nonEmptyCells.push({\n              rowIndex,\n              cellIndex,\n              cellNumber: parseInt(cell.textContent.trim(), 10),\n            });\n          }\n        });\n      });\n\n      this.removeCell(rows);\n\n      nonEmptyCells.forEach(({ rowIndex, cellIndex, cellNumber }) => {\n        let targetRowIndex = rowIndex;\n\n        while (targetRowIndex > 0) {\n          const previousRow = rows[targetRowIndex - 1];\n          const previousCell = previousRow.querySelectorAll('td')[cellIndex];\n\n          if (previousCell.textContent.trim().length === 0) {\n            targetRowIndex--;\n          } else {\n            const previousCellValue = parseInt(previousCell.textContent);\n\n            if (previousCellValue === cellNumber) {\n              const newCellValue = previousCellValue + cellNumber;\n\n              previousCell.textContent = newCellValue;\n              previousCell.className = `field-cell field-cell--${previousCell.textContent}`;\n\n              this.getScore(newCellValue);\n\n              if (newCellValue === 2048) {\n                this.gameStatus = 'win';\n              }\n            } else {\n              const currentRow = rows[targetRowIndex];\n              const currentCell = currentRow.querySelectorAll('td')[cellIndex];\n\n              currentCell.textContent = cellNumber;\n              currentCell.className = `field-cell field-cell--${cellNumber}`;\n            }\n\n            return;\n          }\n        }\n\n        const finalRow = rows[targetRowIndex];\n        const finalCell = finalRow.querySelectorAll('td')[cellIndex];\n\n        finalCell.textContent = cellNumber;\n        finalCell.className = `field-cell field-cell--${cellNumber}`;\n      });\n\n      const gridAfterMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const gridChanged = !gridBeforeMove.every(\n        (row, rowIndex) =>\n          row.every(\n            (cell, cellIndex) => cell === gridAfterMove[rowIndex][cellIndex],\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      if (gridChanged) {\n        return this.findEmptyCells(rows);\n      }\n    }\n  }\n\n  moveDown(rows) {\n    if (this.gameStatus === 'playing') {\n      const arrayOfRows = Array.from(rows);\n\n      const gridBeforeMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const nonEmptyCells = [];\n\n      for (let rowIndex = rows.length - 1; rowIndex >= 0; rowIndex--) {\n        const cells = rows[rowIndex].querySelectorAll('td');\n\n        cells.forEach((cell, cellIndex) => {\n          if (cell.textContent.trim().length > 0) {\n            nonEmptyCells.push({\n              rowIndex,\n              cellIndex,\n              cellNumber: parseInt(cell.textContent.trim(), 10),\n            });\n          }\n        });\n      }\n\n      this.removeCell(rows);\n\n      nonEmptyCells.forEach(({ rowIndex, cellIndex, cellNumber }) => {\n        let targetRowIndex = rowIndex;\n\n        while (targetRowIndex < rows.length - 1) {\n          const nextRow = rows[targetRowIndex + 1];\n          const nextCell = nextRow.querySelectorAll('td')[cellIndex];\n\n          if (nextCell.textContent.trim().length === 0) {\n            targetRowIndex++;\n          } else {\n            const nextCellValue = parseInt(nextCell.textContent);\n\n            if (nextCellValue === cellNumber) {\n              const newCellValue = nextCellValue + cellNumber;\n\n              nextCell.textContent = newCellValue;\n              nextCell.className = `field-cell field-cell--${nextCell.textContent}`;\n\n              this.getScore(newCellValue);\n\n              if (newCellValue === 2048) {\n                this.gameStatus = 'win';\n              }\n            } else {\n              const currentRow = rows[targetRowIndex];\n              const currentCell = currentRow.querySelectorAll('td')[cellIndex];\n\n              currentCell.textContent = cellNumber;\n              currentCell.className = `field-cell field-cell--${cellNumber}`;\n            }\n\n            return;\n          }\n        }\n\n        const finalRow = rows[targetRowIndex];\n        const finalCell = finalRow.querySelectorAll('td')[cellIndex];\n\n        finalCell.textContent = cellNumber;\n        finalCell.className = `field-cell field-cell--${cellNumber}`;\n      });\n\n      const gridAfterMove = arrayOfRows.map(\n        (row) =>\n          Array.from(row.querySelectorAll('td')).map(\n            (cell) => cell.textContent.trim(),\n            // eslint-disable-next-line no-console\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      const gridChanged = !gridBeforeMove.every(\n        (row, rowIndex) =>\n          row.every(\n            (cell, cellIndex) => cell === gridAfterMove[rowIndex][cellIndex],\n          ),\n        // eslint-disable-next-line no-console\n      );\n\n      if (gridChanged) {\n        return this.findEmptyCells(rows);\n      }\n    }\n  }\n\n  getScore(newScore) {\n    if (newScore !== undefined) {\n      this.score += newScore;\n    }\n\n    return this.score;\n  }\n\n  getState(rows) {\n    const arrayOfRows = [];\n\n    rows.forEach((row) => {\n      const cells = row.querySelectorAll('td');\n\n      const arrayOfCell = [];\n\n      cells.forEach((_, cellIndex) => {\n        arrayOfCell.push(cellIndex);\n      });\n\n      arrayOfRows.push(arrayOfCell);\n    });\n\n    this.initialState = arrayOfRows;\n\n    return this.initialState;\n  }\n\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  start(rows) {\n    this.gameStatus = 'playing';\n\n    let isEmpty = true;\n\n    rows.forEach((row) => {\n      const cells = row.querySelectorAll('td');\n\n      cells.forEach((cell) => {\n        if (cell.textContent.trim().length > 0) {\n          isEmpty = false;\n        }\n      });\n    });\n\n    return this.createCell(isEmpty);\n  }\n\n  restart(rows) {\n    this.gameStatus = 'idle';\n\n    this.score = 0;\n\n    this.removeCell(rows);\n\n    this.isGridFull = [];\n  }\n\n  getRandomIndex() {\n    const arrayOfRandomIndexs = [];\n\n    let firstIndex = Math.floor(Math.random() * 4);\n    let secondIndex = Math.floor(Math.random() * 4);\n    let thirdIndex = Math.floor(Math.random() * 4);\n    let fourthIndex = Math.floor(Math.random() * 4);\n\n    if (firstIndex === thirdIndex) {\n      firstIndex = Math.floor(Math.random() * 4);\n      thirdIndex = Math.floor(Math.random() * 4);\n    }\n\n    if (secondIndex === fourthIndex) {\n      secondIndex = Math.floor(Math.random() * 4);\n      fourthIndex = Math.floor(Math.random() * 4);\n    }\n\n    if (firstIndex === secondIndex) {\n      firstIndex = Math.floor(Math.random() * 4);\n      secondIndex = Math.floor(Math.random() * 4);\n    }\n\n    if (thirdIndex === fourthIndex) {\n      thirdIndex = Math.floor(Math.random() * 4);\n      fourthIndex = Math.floor(Math.random() * 4);\n    }\n\n    arrayOfRandomIndexs.push(firstIndex);\n    arrayOfRandomIndexs.push(secondIndex);\n    arrayOfRandomIndexs.push(thirdIndex);\n    arrayOfRandomIndexs.push(fourthIndex);\n\n    return arrayOfRandomIndexs;\n  }\n\n  getRandomCellNumber() {\n    const persentOfFourFirst = Math.random();\n    const persentOfFourSecond = Math.random();\n    const arrayOfRandomCellNumber = [];\n\n    const firstNumber = persentOfFourFirst <= 0.1 ? 4 : 2;\n    const secondNumber = persentOfFourSecond <= 0.1 ? 4 : 2;\n\n    arrayOfRandomCellNumber.push(firstNumber);\n    arrayOfRandomCellNumber.push(secondNumber);\n\n    return arrayOfRandomCellNumber;\n  }\n\n  createCell(isEmpty) {\n    const randomIndexes = this.getRandomIndex();\n    const cellNumber = this.getRandomCellNumber();\n\n    let firstIndexes = null;\n    let seconIndexes = null;\n\n    const arrayOfIndexes = [];\n\n    this.initialState.forEach((row, rowIndex) => {\n      row.forEach((_, cellIndex) => {\n        if (isEmpty) {\n          if (rowIndex === randomIndexes[0] && cellIndex === randomIndexes[2]) {\n            firstIndexes = {\n              rowIndex: randomIndexes[0],\n              cellIndex: randomIndexes[2],\n              cellNumber: cellNumber[0],\n            };\n\n            arrayOfIndexes.push(firstIndexes);\n          }\n\n          if (rowIndex === randomIndexes[1] && cellIndex === randomIndexes[3]) {\n            seconIndexes = {\n              rowIndex: randomIndexes[1],\n              cellIndex: randomIndexes[3],\n              cellNumber: cellNumber[1],\n            };\n\n            arrayOfIndexes.push(seconIndexes);\n          }\n        }\n      });\n    });\n\n    return arrayOfIndexes;\n  }\n\n  createCellIfGameStarted(arrayOfEmpyRows, arrayOfEmpyCells) {\n    const randomSoloRow = Math.floor(Math.random() * arrayOfEmpyRows.length);\n    const randomSoloRowIndex = arrayOfEmpyRows[randomSoloRow];\n    const randomSoloCellIndex = arrayOfEmpyCells[randomSoloRow];\n\n    arrayOfEmpyRows.splice(randomSoloRow, 1);\n    arrayOfEmpyCells.splice(randomSoloRow, 1);\n\n    const cellNumber = this.getRandomCellNumber();\n\n    let firstIndexes = null;\n\n    const arrayOfIndexes = [];\n\n    arrayOfEmpyRows.splice(randomSoloRow, 1);\n    arrayOfEmpyCells.splice(randomSoloRow, 1);\n\n    this.initialState.forEach((row, rowIndex) => {\n      row.forEach((_, cellIndex) => {\n        if (\n          rowIndex === randomSoloRowIndex &&\n          cellIndex === randomSoloCellIndex\n        ) {\n          firstIndexes = {\n            rowIndex,\n            cellIndex,\n            cellNumber: cellNumber[0],\n          };\n\n          arrayOfIndexes.push(firstIndexes);\n        }\n      });\n    });\n\n    return arrayOfIndexes;\n  }\n\n  findEmptyCells(rows) {\n    const arrayOfEmptyRows = [];\n    const arrayOfEmptyCells = [];\n\n    rows.forEach((row, rowIndex) => {\n      const cells = row.querySelectorAll('td');\n\n      cells.forEach((cell, cellIndex) => {\n        if (cell.textContent.trim().length === 0) {\n          arrayOfEmptyRows.push(rowIndex);\n          arrayOfEmptyCells.push(cellIndex);\n        }\n      });\n    });\n\n    return this.createCellIfGameStarted(arrayOfEmptyRows, arrayOfEmptyCells);\n  }\n\n  isMovePossible(gridAfterMove) {\n    const isCellsFullHorizontally = [];\n    const isCellsFullVertically = [];\n\n    gridAfterMove.forEach((row) => {\n      if (\n        row.length === 4 &&\n        !row.includes('') &&\n        isCellsFullHorizontally.length < 4\n      ) {\n        const isCellFull = [];\n\n        for (let i = 0; i < row.length - 1; i++) {\n          if (row[i] !== row[i + 1]) {\n            isCellFull.push(true);\n          }\n\n          if (isCellFull.length === 3) {\n            isCellsFullHorizontally.push(true);\n          }\n        }\n      }\n    });\n\n    for (let i = 0; i < gridAfterMove.length - 1; i++) {\n      const currentRow = gridAfterMove[i];\n      const nextRow = gridAfterMove[i + 1];\n      const isCellFull = [];\n\n      if (\n        currentRow.length === 4 &&\n        nextRow.length === 4 &&\n        !currentRow.includes('') &&\n        !nextRow.includes('')\n      ) {\n        for (let j = 0; j < currentRow.length; j++) {\n          if (currentRow[j] !== nextRow[j]) {\n            isCellFull.push(true);\n          }\n\n          if (isCellFull.length === 4) {\n            isCellsFullVertically.push(true);\n          }\n        }\n      }\n    }\n\n    if (\n      isCellsFullHorizontally.length === 4 &&\n      isCellsFullVertically.length === 3\n    ) {\n      this.gameStatus = 'lose';\n    }\n  }\n\n  removeCell(rows) {\n    rows.forEach((row) => {\n      const cells = row.querySelectorAll('td');\n\n      cells.forEach((cell) => {\n        if (cell.textContent.length > 0) {\n          cell.className = 'field-cell';\n          cell.innerHTML = '';\n        }\n      });\n    });\n  }\n\n  changeMessage(startMessage) {\n    if (this.gameStatus === 'playing') {\n      startMessage.classList.add('hidden');\n    }\n\n    if (this.gameStatus === 'idle') {\n      startMessage.classList.remove('hidden');\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","constructor","initialState","gameStatus","score","moveLeft","rows","arrayOfRows","Array","from","gridBeforeMove","map","row","querySelectorAll","cell","textContent","trim","nonEmptyCells","forEach","rowIndex","cells","cellIndex","length","push","cellNumber","parseInt","removeCell","targetCellIndex","previousCell","previousRow","nextCellValue","newCellValue","className","getScore","currentCell","currentRow","finalCell","finalRow","gridAfterMove","every","findEmptyCells","moveRight","nextCell","nextRow","moveUp","targetRowIndex","previousCellValue","moveDown","newScore","undefined","getState","arrayOfCell","_","getStatus","start","isEmpty","createCell","restart","isGridFull","getRandomIndex","arrayOfRandomIndexs","firstIndex","Math","floor","random","secondIndex","thirdIndex","fourthIndex","getRandomCellNumber","persentOfFourSecond","arrayOfRandomCellNumber","persentOfFourFirst","randomIndexes","firstIndexes","seconIndexes","arrayOfIndexes","createCellIfGameStarted","arrayOfEmpyRows","arrayOfEmpyCells","randomSoloRow","randomSoloRowIndex","randomSoloCellIndex","splice","arrayOfEmptyRows","arrayOfEmptyCells","isMovePossible","isCellsFullHorizontally","isCellsFullVertically","includes","isCellFull","i","j","innerHTML","changeMessage","startMessage","classList","add","remove","$09e991522ca7e64e$var$controls","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$tbody","$09e991522ca7e64e$var$table","$09e991522ca7e64e$var$rows","$09e991522ca7e64e$var$messages","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$createCellIfGameStarted","index","addEventListener","hasAttribute","indexes","$09e991522ca7e64e$var$observer","MutationObserver","grid","observe","childList","subtree","evnt","preventDefault","key"],"version":3,"file":"index.090d6925.js.map"}